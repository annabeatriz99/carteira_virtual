export function buildSolanaTransferTransaction({ from, to, token, amount, latestBlock, decimals, config }: {
    from: any;
    to: any;
    token: any;
    amount: any;
    latestBlock: any;
    decimals: any;
    config: any;
}): Promise<string>;
export function deploySolanaToken({ from, name, symbol, amount, fixedSupply, config, decimals }: {
    from: any;
    name: any;
    symbol: any;
    amount: any;
    fixedSupply: any;
    config: any;
    decimals?: number;
}): Promise<{
    mint: string;
    rawTransaction: string;
}>;
export function mintSolanaToken({ from, to, token, amount, latestBlock, config }: {
    from: any;
    to?: any;
    token: any;
    amount: any;
    latestBlock: any;
    config: any;
}): Promise<string>;
export function deploySolanaCollection({ from, name, symbol, uri, latestBlock, config }: {
    from: any;
    name: any;
    symbol: any;
    uri: any;
    latestBlock: any;
    config: any;
}): Promise<{
    rawTransaction: string;
    collection: string;
}>;
export function deploySolanaNFT({ from, maxSupply, uri, name, symbol, creators, royaltiesFee, collection, latestBlock, config }: {
    from: any;
    maxSupply: any;
    uri: any;
    name: any;
    symbol: any;
    creators?: any;
    royaltiesFee?: number;
    collection?: any;
    latestBlock: any;
    config: any;
}): Promise<{
    rawTransaction: string;
    mint: string;
    metadata: string;
}>;
export function mintEdition({ masterEdition, from, latestBlock, config }: {
    masterEdition: any;
    from: any;
    latestBlock: any;
    config: any;
}): Promise<{
    rawTransaction: string;
    mint: string;
}>;
export function buildSolanaTokenBurnTransaction({ from, token, amount, latestBlock, config }: {
    from: any;
    token: any;
    amount: any;
    latestBlock: any;
    config: any;
}): Promise<string>;
export function updateMetaplexMetadata({ from, token, isMutable, maxSupply, uri, name, symbol, creators, royaltiesFee, latestBlock, config }: {
    from: any;
    token: any;
    isMutable: any;
    maxSupply: any;
    uri: any;
    name: any;
    symbol: any;
    creators?: any;
    royaltiesFee?: number;
    latestBlock: any;
    config: any;
}): Promise<string>;
export function buildSolanaCustomProgramInteraction({ from, programId, data, keys, latestBlock, }: {
    from: any;
    programId: any;
    data: any;
    keys: any;
    latestBlock: any;
}): Promise<string>;
export function createTokenVault({ config, from }: {
    config: any;
    from: any;
}): Promise<{
    txId: string;
    vault: solanaWeb3.PublicKey;
    fractionMint: solanaWeb3.PublicKey;
    redeemTreasury: solanaWeb3.PublicKey;
    fractionTreasury: solanaWeb3.PublicKey;
}>;
export function addTokenToVault({ config, vault, token, from }: {
    config: any;
    vault: any;
    token: any;
    from: any;
}): Promise<{
    txId: string;
    metadata: string;
    tokenStore: string;
}>;
export function activateVault({ config, vault, from }: {
    config: any;
    vault: any;
    from: any;
}): Promise<{
    txId: string;
}>;
export function createStore({ config, from }: {
    config: any;
    from: any;
}): Promise<{
    storeId: solanaWeb3.PublicKey;
    configId: solanaWeb3.PublicKey;
    txId: string;
}>;
export function createAuction({ config, from, vault, tickSize, endAuctionGap, endAuctionAt, gapTickSizePercentage, minumumPrice }: {
    config: any;
    from: any;
    vault: any;
    tickSize: any;
    endAuctionGap: any;
    endAuctionAt: any;
    gapTickSizePercentage: any;
    minumumPrice: any;
}): Promise<{
    txId: string;
    auction: solanaWeb3.PublicKey;
}>;
export function createAuctionAuthority({ config, from, vault, store, auction }: {
    config: any;
    from: any;
    vault: any;
    store: any;
    auction: any;
}): Promise<{
    hash: string;
    auctionManager: string;
    tokenTracker: string;
    acceptPaymentAccount: string;
}>;
export function updateAuctionAuthority({ config, from, auction, auctionManager, latestBlock }: {
    config: any;
    from: any;
    auction: any;
    auctionManager: any;
    latestBlock: any;
}): Promise<string>;
export function updateVaultAuthority({ config, from, vault, auctionManager, latestBlock }: {
    config: any;
    from: any;
    vault: any;
    auctionManager: any;
    latestBlock: any;
}): Promise<string>;
export function whitelistCreators({ config, from, mint, store, latestBlock }: {
    config: any;
    from: any;
    mint: any;
    store: any;
    latestBlock: any;
}): Promise<string>;
export function validateAuction({ config, from, latestBlock, vault, nft, store, metadata, tokenStore, tokenTracker }: {
    config: any;
    from: any;
    latestBlock: any;
    vault: any;
    nft: any;
    store: any;
    metadata: any;
    tokenStore: any;
    tokenTracker: any;
}): Promise<string>;
export function startAuction({ config, from, store, auction, auctionManager }: {
    config: any;
    from: any;
    store: any;
    auction: any;
    auctionManager: any;
}): Promise<string>;
export function placeBid({ config, from, auction, amount }: {
    config: any;
    from: any;
    auction: any;
    amount: any;
}): Promise<{
    txId: string;
    bidderPotToken: solanaWeb3.PublicKey;
    bidderMeta: solanaWeb3.PublicKey;
}>;
export function instantSalePurchase({ config, from, store, auction }: {
    config: any;
    from: any;
    store: any;
    auction: any;
}): Promise<{
    bidTx: any;
    redeemTx: any;
    claimTx: any;
}>;
export function cancelBid({ config, from, auction, bidderPotToken }: {
    config: any;
    from: any;
    auction: any;
    bidderPotToken: any;
}): Promise<{
    txId: string;
}>;
export function finishAuction({ config, from, auction, store, auctionManager, vault, auctionManagerAuthority }: {
    config: any;
    from: any;
    auction: any;
    store: any;
    auctionManager: any;
    vault: any;
    auctionManagerAuthority: any;
}): Promise<string>;
export function redeemAuction({ config, from, auction, store }: {
    config: any;
    from: any;
    auction: any;
    store: any;
}): Promise<{
    txId: string;
}>;
export function claimWinnings({ config, from, auction, store, bidderPotToken }: {
    config: any;
    from: any;
    auction: any;
    store: any;
    bidderPotToken: any;
}): Promise<{
    txId: string;
}>;
export function emptyPaymentAccount({ config, latestBlock, from, auction, store, creatorIndex, creatorAddress }: {
    config: any;
    latestBlock: any;
    from: any;
    auction: any;
    store: any;
    creatorIndex: any;
    creatorAddress: any;
}): Promise<string>;
export function createInstantSaleAuction({ config, from, price, vault }: {
    config: any;
    from: any;
    price: any;
    vault: any;
}): Promise<{
    txId: string;
    auction: solanaWeb3.PublicKey;
}>;
export function listAuctions({ config, authority }: {
    config: any;
    authority: any;
}): Promise<Map<any, any>>;
export function inspectAuction({ config, auction }: {
    config: any;
    auction: any;
}): Promise<{
    pubkey: string;
    info: {
        executable: boolean;
        owner: solanaWeb3.PublicKey;
        lamports: number;
        data: {
            type: "Buffer";
            data: number[];
        };
    };
    data: oldMetaplex.programs.auction.AuctionData;
}>;
import solanaWeb3 = require("@solana/web3.js");
export function sendSolanaTxWithRetry(func: any, params: any, tries?: number): any;
import oldMetaplex = require("@metaplex/js");
