export type WalletInput = {
    txHash: string;
    index: number;
    walletId: string;
};
export type CardanoWalletOutputToken = {
    policy: string;
    amount: string;
    asset: string;
};
export type WalletOutput = {
    address: string;
    amount: string;
    token?: (string | CardanoWalletOutputToken) | undefined;
};
export type WalletTransaction = {
    /**
     * Wallet transaction id
     */
    id: string;
    /**
     * Wallet id
     */
    walletId?: string | undefined;
    /**
     * Inputs for transactions
     */
    inputs?: Array<WalletInput> | undefined;
    addressTo?: string | undefined;
    outputs?: Array<WalletOutput> | undefined;
    amount: string;
    transactionType: import('../../transaction/entity').TransactionType;
    status: string;
    protocol: string;
    createdAt: string;
    assetSymbol?: string | undefined;
    contractAddress?: string | undefined;
    issuer?: string | undefined;
    transactionHash?: string | undefined;
    limit?: string | undefined;
};
export type WalletTransactionStellarTrustline = {
    /**
     * Wallet id
     */
    walletId: string;
    assetSymbol: string;
    issuer: string;
    limit: string;
    memo?: string | undefined;
    fee?: string | undefined;
};
export type WalletTransactionRippleTrustline = WalletTransactionStellarTrustline;
export type WalletTransactionStellarTransfer = {
    walletId: string;
    assetSymbol: string;
    issuer?: string | undefined;
    createAccount?: boolean | undefined;
    amount: string;
    destination: string;
    memo?: string | undefined;
    fee?: string | undefined;
};
export type WalletTransactionRippleTransfer = WalletTransactionStellarTransfer;
export type WalletTransactionBitcoinTransfer = {
    walletId?: string | undefined;
    inputs?: any[] | undefined;
    outputs: any[];
};
export type WalletTransactionCardanoTransfer = {
    walletId?: string | undefined;
    inputs?: any[] | undefined;
    outputs: any[];
};
export type WalletTransactionHathorTransfer = {
    walletId?: string | undefined;
    inputs?: any[] | undefined;
    outputs: any[];
};
export type WalletTransactionEthereumTransfer = {
    walletId: string;
    tokenSymbol?: string | undefined;
    contractAddress?: string | undefined;
    amount: string;
    destination: string;
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export type WalletTransactionCeloTransfer = {
    walletId: string;
    tokenSymbol?: string | undefined;
    contractAddress?: string | undefined;
    amount: string;
    destination: string;
    feeCurrency?: string | undefined;
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export type WalletTransactionEthereumTokenDeploy = {
    walletId: string;
    tokenType: "ERC20" | "ERC721" | "ERC1155";
    params: string[];
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export type WalletTransactionCeloTokenDeploy = {
    walletId: string;
    tokenType: "ERC20" | "ERC721" | "ERC1155";
    params: string[];
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
    feeCurrency?: string | undefined;
};
export type WalletTransactionHathorTokenDeploy = {
    walletId?: string | undefined;
    inputs?: any[] | undefined;
    tokenName: string;
    tokenSymbol: string;
    amount: string;
    mintAuthorityAddress?: string | undefined;
    meltAuthorityAddress?: string | undefined;
};
export type WalletTransactionHathorTokenMint = {
    walletId?: string | undefined;
    inputs?: any[] | undefined;
    tokenUid: string;
    amount: string;
    address: string;
    changeAddress: string;
    mintAuthorityAddress?: string | undefined;
};
export type WalletTransactionHathorTokenMelt = {
    walletId?: string | undefined;
    inputs?: any[] | undefined;
    tokenUid: string;
    amount: string;
    address: string;
    changeAddress: string;
    meltAuthorityAddress?: string | undefined;
};
export type WalletTransactionEthereumSmartContractDeploy = {
    walletId: string;
    contractName: string;
    source: string;
    params: any[];
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export type WalletTransactionCeloSmartContractDeploy = {
    walletId: string;
    contractName: string;
    source: string;
    params: any[];
    feeCurrency?: string | undefined;
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export type WalletTransactionEthereumSmartContractSend = {
    walletId: string;
    contractAddress: string;
    contractAbi: any[];
    method: string;
    params: any[];
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export type WalletTransactionCeloSmartContractSend = {
    walletId: string;
    contractAddress: string;
    contractAbi: any[];
    method: string;
    params: any[];
    feeCurrency?: string | undefined;
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export class Wallet {
    /**
     * Constructor
     *
     * @param {Object} args
     * @param {string} args.privateKey Wallet private key
     * @param {string} args.publicKey Wallet public key
     * @param {string} args.address Wallet address
     * @param {string=} args.xpub Wallet xpub address
     * @param {import('../../../services/blockchain/constants').Protocol} args.protocol blockchain protocol
     * @param {boolean} args.testnet blockchain testnet or mainnet
     */
    constructor({ privateKey, publicKey, address, xpub, protocol, testnet }: {
        privateKey: string;
        publicKey: string;
        address: string;
        xpub?: string | undefined;
        protocol: import('../../../services/blockchain/constants').Protocol;
        testnet: boolean;
    });
    protocol: string;
    privateKey: string;
    publicKey: string;
    address: string;
    xpub: string;
    testnet: boolean;
}
export class WalletInfoResponse {
    constructor(info: any);
}
