export function getKmsControllerInstance(config: any): Controller;
export { Controller as KmsController };
declare class Controller extends Interface {
    /**
   * Get wallet transactions
   * @param {{ status?: string; limit?: number=; offset?: number=; }} input
   * @returns {Promise<import('../entity').Transaction[]>}
   */
    getTransactions({ status, limit, offset }?: {
        status?: string;
        limit?: number;
        offset?: number;
    }): Promise<import('../entity').Transaction[]>;
    /**
     * Get wallet transaction id
     * @param {string} id transaction id
     * @returns {Promise<import('../entity').Transaction>}
     */
    getTransactionById(id: string): Promise<import('../entity').Transaction>;
    /**
     * Update status of wallet transaction
     * @param {string} id transaction id
     * @param {string} status transaction status
     * @param {string} hash transaction hash
     * @returns {Promise<{ id: string }>}
     */
    updateTransactionById(id: string, status: string, hash: string): Promise<{
        id: string;
    }>;
    /**
     * Delete wallet transaction id
     * @param {string} id transaction id
     * @returns {Promise<{ id: string }>}
     */
    deleteTransactionById(id: string): Promise<{
        id: string;
    }>;
    /**
     * @param {import('../entity').SetTrustlineInput} input transaction input
     * @returns {Promise<{}>}
     */
    setTrustline(input: import('../entity').SetTrustlineInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').TokenTransferInput} input transaction input
     * @returns {Promise<{}>}
     */
    transferTokenTransaction(input: import('../entity').TokenTransferInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').NftTransferInput} input transaction input
     * @returns {Promise<{}>}
     */
    transferNftTransaction(input: import('../entity').NftTransferInput): Promise<{}>;
    /**
     * @param {import('../entity').SmartContractDeployInput} input transaction input
     * @returns {Promise<{}>}
     */
    deploySmartContractTransaction(input: import('../entity').SmartContractDeployInput): Promise<{}>;
    /**
     * @param {import('../entity').SmartContractTransactionInput} input transaction input
     * @returns {Promise<{}>}
     */
    createSmartContractTransaction(input: import('../entity').SmartContractTransactionInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').TokenCreationInput} input transaction input
     * @returns {Promise<{}>}
     */
    deployTokenTransaction(input: import('../entity').TokenCreationInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').TokenMintInput} input transaction input
     * @returns {Promise<{}>}
     */
    mintTokenTransaction(input: import('../entity').TokenMintInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').TokenBurnInput} input transaction input
     * @returns {Promise<{}>}
     */
    burnTokenTransaction(input: import('../entity').TokenBurnInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').NftCreationInput} input transaction input
     * @returns {Promise<{}>}
     */
    deployNftTransaction(input: import('../entity').NftCreationInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').NftMintInput} input transaction input
     * @returns {Promise<{}>}
     */
    mintNftTransaction(input: import('../entity').NftMintInput): Promise<{}>;
    /**
     * Create wallet transaction
     * @param {import('../entity').NftBurnInput} input transaction input
     * @returns {Promise<{}>}
     */
    burnNftTransaction(input: import('../entity').NftBurnInput): Promise<{}>;
}
import Interface = require("./interface");
