export type WalletInput = {
    txHash: string;
    index: number;
    walletId: string;
};
export type CardanoWalletOutputToken = {
    policy: string;
    amount: string;
    asset: string;
};
export type WalletOutput = {
    address: string;
    amount: string;
    token?: (string | CardanoWalletOutputToken) | undefined;
};
export type Transaction = {
    /**
     * Wallet transaction id
     */
    id: string;
    /**
     * Wallet id
     */
    walletId?: string | undefined;
    destination?: string | undefined;
    amount: string;
    /**
     * Inputs for transactions
     */
    inputs?: Array<WalletInput> | undefined;
    destinations?: Array<WalletOutput> | undefined;
    transactionType: import('../../transaction/entity').TransactionType;
    status: string;
    protocol: string;
    createdAt: string;
    token?: string | undefined;
    contractAddress?: string | undefined;
    issuer?: string | undefined;
    transactionHash?: string | undefined;
    data?: any | undefined;
};
export type EthereumTokenDeploy = {
    walletId: string;
    tokenType: "ERC20" | "ERC721" | "ERC1155";
    params: string[];
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
};
export type CeloTokenDeploy = {
    walletId: string;
    tokenType: "ERC20" | "ERC721" | "ERC1155";
    params: string[];
    fee?: {
        gas: number;
        gasPrice: string;
    } | undefined;
    feeCurrency?: string | undefined;
};
export type HathorTokenDeploy = {
    walletId?: string | undefined;
    inputs?: any[] | undefined;
    tokenName: string;
    tokenSymbol: string;
    amount: string;
    mintAuthorityAddress?: string | undefined;
    meltAuthorityAddress?: string | undefined;
};
export type TokenDeploy = (EthereumTokenDeploy | CeloTokenDeploy | HathorTokenDeploy) & ProtocolType;
export type NftTransferInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token name or address to transfer
     */
    token: string;
    /**
     * destination address
     */
    destination: string;
    /**
     * amount to be transferred
     */
    amount: string | number;
    /**
     * token id to be transferred only for EVMs (ethereum, bsc, celo, polygon, avax)
     */
    tokenId?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
};
export type NftMintInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token address to mint
     */
    token: string;
    /**
     * destination address
     */
    destination: string;
    /**
     * amount to be minted
     */
    amount: string;
    /**
     * token id to be minted only for EVMs (ethereum, bsc, celo, polygon, avax)
     */
    tokenId?: string | undefined;
    /**
     * metadata URI string for EVMs this will be the base URI
     */
    uri?: string | undefined;
    /**
     * mint authority address for hathor only
     */
    mintAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
};
export type NftBurnInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token address to burn
     */
    token: string;
    /**
     * amount to be burnt
     */
    amount: string;
    /**
     * token id to be burnt only for EVMs (ethereum, bsc, celo, polygon, avax)
     */
    tokenId?: string | undefined;
    /**
     * melt authority address for hathor only
     */
    meltAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     *
     * /*
     */
    feeCurrency?: string | undefined;
};
export type TokenTransferInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token name or address to transfer
     */
    token: string;
    /**
     * destination address
     */
    destination?: string | undefined;
    /**
     * amount to be transferred
     */
    amount: string;
    /**
     * destinations (for bitcoin, hathor and cardano transactions only)
     */
    destinations?: Array<import('../../transaction/entity').Output | import('../../transaction/entity').CardanoOutput> | undefined;
    /**
     * issuer account of the token to transfer (only for stellar and ripple transactions)
     */
    issuer?: string | undefined;
    /**
     * true if this is a transfer to create an account in the blockchain (only for stellar transactions)
     */
    createAccount?: boolean | undefined;
    /**
     * text to be attached to transaction (for stellar and ripple only)
     */
    memo?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * fee
     */
    fee?: string | undefined;
};
export type TokenCreationInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token name
     */
    name: string;
    /**
     * token symbol
     */
    symbol: string;
    /**
     * amount to be created
     */
    amount: string;
    /**
     * address responsible to mint more tokens (for hathor only)
     */
    mintAuthorityAddress?: string | undefined;
    /**
     * address responsible to burn more tokens (for hathor only)
     */
    meltAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * true if this token has fixed supply (for solana only)
     */
    fixedSupply?: boolean | undefined;
    /**
     * (for solana only)
     */
    decimals?: number | undefined;
};
export type NftCreationInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token name
     */
    name: string;
    /**
     * token symbol
     */
    symbol: string;
    /**
     * amount to be created
     */
    amount: string;
    /**
     * metadata URI string for hathor and solana only, for EVMs this will be the base URI
     */
    uri?: string | undefined;
    /**
     * token type for EVMs only
     */
    type?: ('ERC721' | 'ERC1155') | undefined;
    /**
     * address responsible to mint more tokens (for hathor only)
     */
    mintAuthorityAddress?: string | undefined;
    /**
     * address responsible to burn more tokens (for hathor only)
     */
    meltAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * true if this token has fixed supply (for solana only)
     */
    creators?: import('../../transaction/entity').SolanaCreator[] | undefined;
    /**
     * (for solana only)
     */
    royaltiesFee?: number | undefined;
    /**
     * (for solana only)
     */
    collection?: string | undefined;
};
export type TokenMintInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token name or address to transfer
     */
    token: string;
    /**
     * destination address
     */
    destination?: string | undefined;
    /**
     * amount to be transferred
     */
    amount: string;
    /**
     * address responsible to mint more tokens (for hathor only)
     */
    mintAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
};
export type SetTrustlineInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token symbol
     */
    symbol: string;
    /**
     * issuer account
     */
    issuer: string;
    /**
     * limit amount
     */
    limit: string;
};
export type TokenBurnInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    walletId: string;
    /**
     * token name or address to transfer
     */
    token: string;
    /**
     * amount to be transferred
     */
    amount: string;
    /**
     * address responsible to burn more tokens (for hathor only)
     */
    meltAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
};
export type SmartContractTransactionInput = {
    walletId: string;
    contractAddress: string;
    contractAbi: Array<any>;
    method: string;
    params: any[];
    protocol: string;
    fee?: Fee;
    feeCurrency?: string | undefined;
};
export type SmartContractDeployInput = {
    walletId: string;
    contractName: string;
    params: any[];
    source: string;
    protocol: string;
    fee?: Fee;
    feeCurrency?: string | undefined;
};
