export function getNftControllerInstance(config: any): Controller;
export { Controller as NftController };
declare class Controller extends Interface {
    /**
     * Get token info
     * @param {import('../entity').NftInfoInput} input
     * @returns {Promise<import('../entity').NftInfo>}
     */
    getInfo(input: import('../entity').NftInfoInput): Promise<import('../entity').NftInfo>;
    /**
     * Get token balance
     * @param {import('../entity').NftBalanceInfoInput} input
     * @returns {Promise<import('../entity').NftBalanceInfo>}
     */
    getBalance(input: import('../entity').NftBalanceInfoInput): Promise<import('../entity').NftBalanceInfo>;
    /**
     * Get metadata of nft
     * @param {import('../entity').NftMetadataInput} input
     * @returns {Promise<import('../entity').NftMetadata>}
     */
    getMetadata(input: import('../entity').NftMetadataInput): Promise<import('../entity').NftMetadata>;
    /**
     * Create NFTs
     * @param {import('../entity').NftCreationInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    create(input: import('../entity').NftCreationInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Transfer NFT
     * @param {import('../entity').NftTransferInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    transfer(input: import('../entity').NftTransferInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Mint NFTs
     * @param {import('../entity').NftMintInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    mint(input: import('../entity').NftMintInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Burn NFTs
     * @param {import('../entity').NftBurnInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    burn(input: import('../entity').NftBurnInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Invoke "approve" method from ERC721-compatible smart contracts
     * @param {import('../entity').NftApproveInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    approve(input: import('../entity').NftApproveInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Invoke "setApprovalForAll" method from ERC721/ERC1155-compatible smart contracts
     * @param {import('../entity').NftSetApprovalForAllInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    setApprovalForAll(input: import('../entity').NftSetApprovalForAllInput): Promise<import('../../transaction/entity').TransactionResponse>;
}
import Interface = require("./interface");
