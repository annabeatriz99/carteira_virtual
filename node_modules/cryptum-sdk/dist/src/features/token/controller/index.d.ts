export function getTokenControllerInstance(config: any): Controller;
export { Controller as TokenController };
declare class Controller extends Interface {
    /**
     * Get fungible token info
     * @param {import('../entity').TokenInfoInput} input
     * @returns {Promise<import('../entity').TokenInfo>}
     */
    getInfo(input: import('../entity').TokenInfoInput): Promise<import('../entity').TokenInfo>;
    /**
     * Get token balance
     * @param {import('../entity').TokenBalanceInfoInput} input
     * @returns {Promise<import('../entity').TokenBalanceInfo>}
     */
    getBalance(input: import('../entity').TokenBalanceInfoInput): Promise<import('../entity').TokenBalanceInfo>;
    /**
     * Transfer tokens from wallet to destination address
     * @param {import('../entity').TokenTransferInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    transfer(input: import('../entity').TokenTransferInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Create tokens
     * @param {import('../entity').TokenCreationInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    create(input: import('../entity').TokenCreationInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Set trustline for stellar and ripple assets
     * @param {import('../entity').SetTrustlineInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    setTrustline(input: import('../entity').SetTrustlineInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Mint tokens
     * @param {import('../entity').TokenMintInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    mint(input: import('../entity').TokenMintInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Burn tokens
     * @param {import('../entity').TokenBurnInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    burn(input: import('../entity').TokenBurnInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Invoke "approve" method from ERC20-compatible smart contracts
     * @param {import('../entity').TokenApproveInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    approve(input: import('../entity').TokenApproveInput): Promise<import('../../transaction/entity').TransactionResponse>;
}
import Interface = require("./interface");
