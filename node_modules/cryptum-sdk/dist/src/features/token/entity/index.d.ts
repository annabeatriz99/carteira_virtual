export type TokenInfoInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    /**
     * token uid for hathor only
     */
    tokenUid?: string | undefined;
    tokenAddress?: string | undefined;
};
export type TokenInfo = {
    name: string;
    symbol: string;
    totalSupply?: string | undefined;
    tokenAddress?: string | undefined;
    decimals?: string | undefined;
};
export type TokenMetadataInput = {
    protocol: string;
    tokenUid?: string;
    tokenAddress?: string;
    tokenId?: string;
};
export type TokenBalanceInfoInput = {
    protocol: string;
    tokenUid?: string;
    tokenAddress?: string;
    tokenId?: string;
    address: string;
};
export type TokenBalanceInfo = {
    tokenAddress?: string;
    tokenUid?: string;
    owner: string;
    balance: string;
};
export type TokenTransferInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * token name or address to transfer
     */
    token: string;
    /**
     * destination address
     */
    destination?: string | undefined;
    /**
     * amount to be transferred
     */
    amount: string;
    /**
     * destinations (for bitcoin, hathor and cardano transactions only)
     */
    destinations?: Array<import('../../transaction/entity').Output | import('../../transaction/entity').CardanoOutput> | undefined;
    /**
     * issuer account of the token to transfer (only for stellar and ripple transactions)
     */
    issuer?: string | undefined;
    /**
     * true if this is a transfer to create an account in the blockchain (only for stellar transactions)
     */
    createAccount?: boolean | undefined;
    /**
     * text to be attached to transaction (for stellar and ripple only)
     */
    memo?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * fee
     */
    fee?: string | undefined;
};
export type SetTrustlineInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * token symbol
     */
    symbol: string;
    /**
     * issuer account
     */
    issuer: string;
    /**
     * limit amount
     */
    limit: string;
};
export type TokenCreationInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * token name
     */
    name: string;
    /**
     * token symbol
     */
    symbol: string;
    /**
     * amount to be created
     */
    amount: string;
    /**
     * address responsible to mint more tokens (for hathor only)
     */
    mintAuthorityAddress?: string | undefined;
    /**
     * address responsible to burn more tokens (for hathor only)
     */
    meltAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * true if this token has fixed supply (for solana only)
     */
    fixedSupply?: boolean | undefined;
    /**
     * (for solana only)
     */
    decimals?: number | undefined;
    /**
     * fee
     */
    fee: import("../../transaction/entity").Fee;
};
export type TokenMintInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * token name or address to transfer
     */
    token: string;
    /**
     * destination address
     */
    destination?: string | undefined;
    /**
     * amount to be transferred
     */
    amount: string;
    /**
     * address responsible to mint more tokens (for hathor only)
     */
    mintAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * fee
     */
    fee: import("../../transaction/entity").Fee;
};
export type TokenBurnInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * token name or address to transfer
     */
    token: string;
    /**
     * amount to be transferred
     */
    amount: string;
    /**
     * address responsible to burn more tokens (for hathor only)
     */
    meltAuthorityAddress?: string | undefined;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * fee
     */
    fee: import("../../transaction/entity").Fee;
};
export type TokenApproveInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * token address to invoke the approve method
     */
    token: string;
    /**
     * amount to be transferred
     */
    amount: string;
    /**
     * address allowed to withdraw tokens from this wallet
     */
    spender: string;
    /**
     * fee currency (for celo only)
     */
    feeCurrency?: string | undefined;
    /**
     * fee
     */
    fee: import("../../transaction/entity").Fee;
};
