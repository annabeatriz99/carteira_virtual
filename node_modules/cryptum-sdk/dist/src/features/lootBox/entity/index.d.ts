export type DeployLootBoxFactoryInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * loot box name
     */
    name: string;
    /**
     * loot box symbol
     */
    symbol: string;
    /**
     * contract URI
     */
    contractURI?: string | undefined;
    /**
     * trusted forwarders addresses
     */
    trustedForwarders?: string[] | undefined;
    /**
     * royalty recipient Address
     */
    royaltyRecipient?: string | undefined;
    royaltyBps?: number | undefined;
};
export type OpenLootBoxInput = {
    protocol: string;
    lootBoxId: string;
    amount?: string;
    lootBoxAddress: string;
    wallet: import('../../wallet/entity').Wallet;
};
export type GetLootBoxContentInput = {
    protocol: string;
    lootBoxAddress: string;
    lootBoxId: string;
};
/**
 * :string; tokenId:string; tokenType: "ERC721" | "ERC1155" | "ERC20"; amount: string } Contents
 */
export type exports = tokenAddress;
export type ApproveContent = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * loot box contract address
     */
    lootBoxAddress: string;
    /**
     * token contract address
     */
    tokenAddress: string;
    /**
     * type of the token
     */
    tokenType: "ERC721" | "ERC1155" | "ERC20";
    /**
     * tokenId of the content (if content is an ERC-721 token)
     */
    tokenId: string;
    /**
     * amount of tokens to be approved (if content is an ERC20 token)
     */
    amount: string;
};
export type LootBoxContent = {
    tokenAddress: string;
    tokenId: string;
    tokenType: "ERC721" | "ERC1155" | "ERC20";
    amount: string;
};
export type CreateLootBoxInput = {
    protocol: import('../../../services/blockchain/constants').Protocol;
    wallet: import('../../wallet/entity').Wallet;
    /**
     * lootbox tokens bounty
     */
    contents: LootBoxContent[];
    /**
     * number of reward units
     */
    rewardUnits?: string | undefined;
    /**
     * loot box URI
     */
    lootBoxURI?: string | undefined;
    /**
     * start time to loot box to be open
     */
    openStartTimestamp: string;
    amountDistributedPerOpen?: string | undefined;
    /**
     * recipient
     */
    recipient: string;
    /**
     * Loot box factory contract address
     */
    lootBoxAddress: string;
};
