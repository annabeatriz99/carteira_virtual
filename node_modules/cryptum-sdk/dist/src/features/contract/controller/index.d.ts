export function getContractControllerInstance(config: any): Controller;
export { Controller as ContractController };
declare class Controller extends Interface {
    /**
     * Call smart contract method
     * @param {import('../entity').SmartContractCallMethodInput} input
     * @returns {Promise<import('../entity').SmartContractCallResponse>}
     */
    callMethod(input: import('../entity').SmartContractCallMethodInput): Promise<import('../entity').SmartContractCallResponse>;
    /**
     * Test if supports interface id
     * @param {{ protocol: Protocol, contractAddress:string, interfaceId:string}} input
     * @returns {Promise<boolean>}
     */
    supportsInterfaceId(input: {
        protocol: Protocol;
        contractAddress: string;
        interfaceId: string;
    }): Promise<boolean>;
    /**
     * Create and send smart contract call transaction
     * @param {import('../entity').SmartContractCallTransactionInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    callMethodTransaction(input: import('../entity').SmartContractCallTransactionInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Create smart contract call transaction
     * @param {import('../entity').SmartContractCallTransactionInput} input
     * @returns {Promise<import('../../transaction/entity').SignedTransaction>}
     */
    buildMethodTransaction(input: import('../entity').SmartContractCallTransactionInput): Promise<import('../../transaction/entity').SignedTransaction>;
    /**
     * Deploy smart contract to blockchain
     * @param {import('../entity').SmartContractDeployTransactionInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    deploy(input: import('../entity').SmartContractDeployTransactionInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Deploy smart contract to blockchain
     * @param {import('../entity').SmartContractDeployTransactionInput} input
     * @returns {Promise<import('../../transaction/entity').SignedTransaction>}
     */
    buildDeployTransaction(input: import('../entity').SmartContractDeployTransactionInput): Promise<import('../../transaction/entity').SignedTransaction>;
    /**
     * Create call transaction to token/asset issue
     * @param {import('../entity').TokenDeployTransactionInput} input
     * @returns {Promise<import('../../transaction/entity').TransactionResponse>}
     */
    deployToken(input: import('../entity').TokenDeployTransactionInput): Promise<import('../../transaction/entity').TransactionResponse>;
    /**
     * Create call transaction to token/asset issue
     * @param {import('../entity').TokenDeployTransactionInput} input
     * @returns {Promise<import('../../transaction/entity').SignedTransaction>}
     */
    buildDeployTokenTransaction(input: import('../entity').TokenDeployTransactionInput): Promise<import('../../transaction/entity').SignedTransaction>;
}
import Interface = require("./interface");
import { Protocol } from "../../../services/blockchain/constants";
