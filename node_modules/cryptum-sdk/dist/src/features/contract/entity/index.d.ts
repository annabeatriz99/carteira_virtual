export class SmartContractCallTransactionInput {
    /**
     * Creates an instance of SmartContractCallTransactionInput.
     *
     * @param {object} args
     * @param {import('../../wallet/entity').Wallet} args.wallet
     * @param {string} args.contractAddress
     * @param {Array<any>} args.contractAbi
     * @param {string} args.method
     * @param {any[]} args.params
     * @param {string} args.protocol
     * @param {Fee=} args.fee
     * @param {string=} args.feeCurrency
     * @param {boolean=} args.testnet
     */
    constructor({ wallet, contractAddress, contractAbi, method, params, protocol, fee, feeCurrency }: {
        wallet: import('../../wallet/entity').Wallet;
        contractAddress: string;
        contractAbi: Array<any>;
        method: string;
        params: any[];
        protocol: string;
        fee?: Fee | undefined;
        feeCurrency?: string | undefined;
        testnet?: boolean | undefined;
    });
    wallet: import("../../wallet/entity").Wallet;
    contractAddress: string;
    contractAbi: any[];
    method: string;
    params: any[];
    protocol: string;
    fee: Fee;
    feeCurrency: string;
}
export class SolanaTokenDeployInput {
    /**
     * Creates an instance of SolanaTokenDeployInput.
     *
     * @param {object} args
     * @param {import('../../wallet/entity').Wallet} args.from
     * @param {string} args.to
     * @param {string} args.fixedSupply
     * @param {number} args.decimals
     * @param {string} args.amount
     * @param {string} args.network
     */
    constructor({ from, to, fixedSupply, decimals, amount, network }: {
        from: import('../../wallet/entity').Wallet;
        to: string;
        fixedSupply: string;
        decimals: number;
        amount: string;
        network: string;
    });
    from: import("../../wallet/entity").Wallet;
    to: string;
    fixedSupply: string;
    decimals: number;
    amount: string;
    network: string;
}
export class SmartContractCallResponse {
    constructor({ result }: {
        result: any;
    });
    result: any;
}
export class SmartContractDeployTransactionInput {
    /**
     * Creates an instance of SmartContractDeployTransactionInput.
     *
     * @param {object} args
     * @param {import('../../wallet/entity').Wallet} args.wallet
     * @param {string} args.contractName
     * @param {any[]} args.params
     * @param {string} args.source
     * @param {string} args.protocol
     * @param {Fee=} args.fee
     * @param {string=} args.feeCurrency
     * @param {boolean=} args.testnet
     */
    constructor({ wallet, contractName, params, source, fee, feeCurrency, protocol }: {
        wallet: import('../../wallet/entity').Wallet;
        contractName: string;
        params: any[];
        source: string;
        protocol: string;
        fee?: Fee | undefined;
        feeCurrency?: string | undefined;
        testnet?: boolean | undefined;
    });
    wallet: import("../../wallet/entity").Wallet;
    contractName: string;
    params: any[];
    source: string;
    protocol: string;
    fee: Fee;
    feeCurrency: string;
}
export class TokenDeployTransactionInput {
    /**
     * Creates an instance of TokenDeployTransactionInput.
     *
     * @param {object} args
     * @param {import('../../wallet/entity').Wallet} args.wallet
     * @param {any[]} args.params
     * @param {string} args.tokenType
     * @param {Fee=} args.fee
     * @param {Protocol} args.protocol
     * @param {string=} args.feeCurrency
     */
    constructor({ wallet, tokenType, params, fee, protocol, feeCurrency }: {
        wallet: import('../../wallet/entity').Wallet;
        params: any[];
        tokenType: string;
        fee?: Fee | undefined;
        protocol: Protocol;
        feeCurrency?: string | undefined;
    });
    wallet: import("../../wallet/entity").Wallet;
    tokenType: string;
    params: any[];
    protocol: Protocol;
    fee: Fee;
    feeCurrency: string;
}
export class SmartContractCallMethodInput {
    /**
     * Creates an instance of SmartContractCallMethodInput.
     *
     * @param {object} args
     * @param {string} args.from
     * @param {string} args.contractAddress
     * @param {Array<any>} args.contractAbi
     * @param {string} args.method
     * @param {any[]} args.params
     * @param {string} args.protocol
     * @param {boolean=} args.testnet
     */
    constructor({ from, contractAddress, contractAbi, method, params, protocol }: {
        from: string;
        contractAddress: string;
        contractAbi: Array<any>;
        method: string;
        params: any[];
        protocol: string;
        testnet?: boolean | undefined;
    });
    from: string;
    contractAddress: string;
    contractAbi: any[];
    method: string;
    params: any[];
    protocol: string;
}
