"use strict";
/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const websocket_1 = __importDefault(require("../websocket"));
const helpers_1 = __importDefault(require("../helpers"));
const connection_1 = __importDefault(require("../connection"));
const types_1 = require("../wallet/types");
/**
 * This is a Connection that may be shared by one or more wallets.
 *
 * It has the following states:
 * - CLOSED: When it is disconnected from the server.
 * - CONNECTING: When it is connecting to the server.
 * - CONNECTED: When it is connected.
 *
 * You can subscribe for the following events:
 * - state: Fired when the state of the Wallet changes.
 * - wallet-update: Fired when a new wallet message arrive from the websocket.
 **/
class WalletConnection extends connection_1.default {
    constructor(options) {
        super(options);
        this.handleWalletMessage = this.handleWalletMessage.bind(this);
        const wsOptions = { wsURL: helpers_1.default.getWSServerURL(this.currentServer) };
        if (options.connectionTimeout) {
            wsOptions['connectionTimeout'] = options.connectionTimeout;
        }
        this.websocket = new websocket_1.default(wsOptions);
    }
    /**
     * Connect to the server and start emitting events.
     **/
    start() {
        // This should never happen as the websocket is initialized on the constructor
        if (!this.websocket) {
            throw new Error('Websocket is not initialized');
        }
        this.websocket.on('is_online', this.onConnectionChange);
        this.websocket.on('wallet', this.handleWalletMessage);
        this.websocket.on('height_updated', (height) => {
            this.emit('best-block-update', height);
        });
        this.websocket.on('addresses_loaded', (data) => {
            this.emit('wallet-load-partial-update', data);
        });
        this.setState(types_1.ConnectionState.CONNECTING);
        this.websocket.setup();
    }
}
// TODO: This is to maintain compatibility until we migrate to typescript
// @ts-ignore
WalletConnection.CLOSED = 0;
// @ts-ignore
WalletConnection.CONNECTING = 1;
// @ts-ignore
WalletConnection.CONNECTED = 2;
exports.default = WalletConnection;
//# sourceMappingURL=connection.js.map