"use strict";
/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const websocket_1 = __importDefault(require("./websocket"));
const config_1 = __importDefault(require("../config"));
const connection_1 = __importStar(require("../connection"));
const types_1 = require("./types");
/**
 * This is a Connection that may be shared by one or more wallets.
 *
 * It has the following states:
 * - CLOSED: When it is disconnected from the server.
 * - CONNECTING: When it is connecting to the server.
 * - CONNECTED: When it is connected.
 *
 * You can subscribe for the following events:
 * - state: Fired when the state of the Wallet changes.
 * - wallet-update: Fired when a new wallet message arrive from the websocket.
 **/
class WalletServiceConnection extends connection_1.default {
    constructor(options) {
        const { network, servers, walletId, connectionTimeout, } = Object.assign(Object.assign({}, connection_1.DEFAULT_PARAMS), options);
        super({
            network,
            servers,
            connectionTimeout,
        });
        this.connectionTimeout = connectionTimeout;
        this.walletId = walletId;
    }
    /**
     * Sets the walletId for the current connection instance
     **/
    setWalletId(walletId) {
        this.walletId = walletId;
    }
    /**
     * Connect to the server and start emitting events.
     **/
    start() {
        if (!this.walletId) {
            throw new Error('Wallet id should be set before connection start.');
        }
        const wsOptions = {
            wsURL: config_1.default.getWalletServiceBaseWsUrl(),
            walletId: this.walletId,
            connectionTimeout: this.connectionTimeout,
        };
        this.websocket = new websocket_1.default(wsOptions);
        this.websocket.on('is_online', (online) => this.onConnectionChange(online));
        this.websocket.on('new-tx', (payload) => this.emit('new-tx', payload.data));
        this.websocket.on('update-tx', (payload) => this.emit('update-tx', payload.data));
        this.setState(types_1.ConnectionState.CONNECTING);
        this.websocket.setup();
    }
}
exports.default = WalletServiceConnection;
//# sourceMappingURL=connection.js.map