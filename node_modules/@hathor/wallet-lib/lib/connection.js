"use strict";
/**
 * Copyright (c) Hathor Labs and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_PARAMS = void 0;
const events_1 = require("events");
const network_1 = __importDefault(require("./network"));
const config_1 = __importDefault(require("./config"));
const types_1 = require("./wallet/types");
exports.DEFAULT_PARAMS = {
    network: 'mainnet',
    servers: [],
    connectionTimeout: 5000,
};
/**
 * This is a Connection that may be shared by one or more wallets.
 *
 * It has the following states:
 * - CLOSED: When it is disconnected from the server.
 * - CONNECTING: When it is connecting to the server.
 * - CONNECTED: When it is connected.
 *
 * You can subscribe for the following events:
 * - state: Fired when the state of the Wallet changes.
 * - wallet-update: Fired when a new wallet message arrive from the websocket.
 **/
class Connection extends events_1.EventEmitter {
    /*
     * servers {Array} List of servers for the wallet to connect to, e.g. http://localhost:8080/v1a/
     */
    constructor(options) {
        super();
        const { network, servers, } = Object.assign(Object.assign({}, exports.DEFAULT_PARAMS), options);
        if (!network) {
            throw Error('You must explicitly provide the network.');
        }
        network_1.default.setNetwork(network);
        this.onConnectionChange = this.onConnectionChange.bind(this);
        this.websocket = null;
        this.network = network;
        this.state = types_1.ConnectionState.CLOSED;
        this.currentServer = servers[0] || config_1.default.getServerUrl();
    }
    /**
     * Called when the connection to the websocket changes.
     * It is also called if the network is down.
     **/
    onConnectionChange(value) {
        if (value) {
            this.setState(types_1.ConnectionState.CONNECTED);
        }
        else {
            this.setState(types_1.ConnectionState.CONNECTING);
        }
    }
    /**
     * Called when a new wallet message arrives from websocket.
     *
     * @param {Object} wsData Websocket message data
     **/
    handleWalletMessage(wsData) {
        this.emit('wallet-update', wsData);
    }
    /**
     * Update class state
     *
     * @param {Number} state New state
     */
    setState(state) {
        this.state = state;
        this.emit('state', state);
    }
    /**
     * Close the connections and stop emitting events.
     **/
    stop() {
        // TODO Double check that we are properly cleaning things up.
        // See: https://github.com/HathorNetwork/hathor-wallet-headless/pull/1#discussion_r369859701
        this.removeAllListeners();
        if (this.websocket) {
            this.websocket.removeAllListeners();
            this.websocket.endConnection();
        }
        this.setState(types_1.ConnectionState.CLOSED);
    }
    /**
     * Call websocket endConnection
     * Needed for compatibility with old src/wallet code
     **/
    endConnection() {
        if (this.websocket) {
            this.websocket.endConnection();
        }
    }
    /**
     * Call websocket setup
     * Needed for compatibility with old src/wallet code
     **/
    setup() {
        // This should never happen as this.websocket is initialized on the constructor
        if (!this.websocket) {
            throw new Error('Websocket is not initialized.');
        }
        this.websocket.setup();
    }
    /**
     * Gets current server
     */
    getCurrentServer() {
        return this.currentServer;
    }
    /**
     * Gets current network
     */
    getCurrentNetwork() {
        return this.network;
    }
}
exports.default = Connection;
//# sourceMappingURL=connection.js.map